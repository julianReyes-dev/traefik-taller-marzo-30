version: '3.8'

services:
  # ======================
  # Traefik Reverse Proxy
  # ======================
  traefik:
    image: traefik:v2.9  # Versión oficial de Traefik
    container_name: traefik  # Nombre fijo para el contenedor
    security_opt:
      - no-new-privileges:true  # Mejora de seguridad
    restart: always  # Reinicio automático si falla
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # Acceso a la API de Docker
      - ./traefik.yml:/etc/traefik/traefik.yml  # Configuración personalizada
    ports:
      - 80:80  # Puerto HTTP
      - 8080:8080  # Dashboard de administración
    command:
      - --api.dashboard=true  # Habilita el dashboard
      - --providers.docker=true  # Habilita el proveedor Docker
      - --providers.docker.exposedbydefault=false  # Seguridad: no exponer todos los contenedores
      - --providers.docker.network=traefik_network  # Red específica para Traefik
      - --entrypoints.webinsecure.address=:80  # Punto de entrada HTTP
    networks:
      - traefik_network  # Conecta a la red compartida
    labels:
      traefik.enable: true  # Habilita Traefik para este servicio
      # Configuración del Dashboard
      traefik.http.routers.traefik.rule: Host(`traefik.localhost`)
      traefik.http.routers.traefik.service: api@internal  # Servicio interno del dashboard
      traefik.http.routers.traefik.entrypoints: webinsecure

  # ======================
  # API Básica (3 instancias)
  # ======================
  api_basic:
    build: ./api_basic  # Construye desde Dockerfile en esta carpeta
    deploy:
      replicas: 3  # Tres instancias para balanceo de carga
    labels:
      - "traefik.enable=true"  # Habilita Traefik para este servicio
      - "traefik.http.routers.api-basic.entrypoints=webinsecure"  # Punto de entrada
      - "traefik.http.routers.api-basic.rule=Host(`api.localhost`) && PathPrefix(`/basic`)"  # Regla de enrutamiento
      - "traefik.http.routers.api-basic.service=api-basic"  # Nombre del servicio
      - "traefik.http.services.api-basic.loadbalancer.server.port=3000"  # Puerto del servicio
      # Configuración de health check
      - "traefik.http.services.api-basic.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.api-basic.loadbalancer.healthcheck.interval=5s"
      # Middleware para manejo de errores 500-599
      - "traefik.http.middlewares.api-500.errors.status=500-599"
      - "traefik.http.middlewares.api-500.errors.service=api-backup"
      - "traefik.http.middlewares.api-500.errors.query=/backup"
      - "traefik.http.routers.api-basic.middlewares=api-500"  # Aplica el middleware
    networks:
      - traefik_network

  # ======================
  # API Premium (2 instancias)
  # ======================
  api_premium:
    build: ./api_premium
    deploy:
      replicas: 2
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-premium.rule=Host(`api.localhost`) && PathPrefix(`/premium`)"
      - "traefik.http.services.api-premium.loadbalancer.server.port=3001"
      # Middleware de autenticación básica
      - "traefik.http.routers.api-premium.middlewares=premium-auth"
      - "traefik.http.middlewares.premium-auth.basicauth.users=user:$$apr1$$Qi7HBAKK$$xS5cIzL8VQAFy6cimC7v4."  # user:user
    networks:
      - traefik_network

  # ======================
  # API Admin (1 instancia)
  # ======================
  api_admin:
    build: ./api_admin
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-admin.rule=Host(`api.localhost`) && PathPrefix(`/admin`)"
      - "traefik.http.services.api-admin.loadbalancer.server.port=3002"
      # Cadena de middlewares (autenticación + whitelist)
      - "traefik.http.routers.api-admin.middlewares=admin-chain"
      - "traefik.http.middlewares.admin-chain.chain.middlewares=admin-auth,admin-ipwhitelist"
      # Autenticación básica
      - "traefik.http.middlewares.admin-auth.basicauth.users=admin:$$apr1$$Z1sbqKz8$$4/g3NzDCqLE/tURphL2vb1"  # admin:secret
      # Whitelist de IPs
      - "traefik.http.middlewares.admin-ipwhitelist.ipwhitelist.sourcerange=127.0.0.1/32,192.168.20.22,172.18.0.0/16"
    networks:
      - traefik_network

  # ======================
  # Servidor de Respaldo
  # ======================
  api_backup:
    build: ./api_backup
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-backup.rule=Host(`api.localhost`) && PathPrefix(`/backup`)"
      - "traefik.http.services.api-backup.loadbalancer.server.port=3003"
    networks:
      - traefik_network

  # ======================
  # Servidor de Páginas de Error
  # ======================
  nginxError:
    image: nginx:latest
    volumes:
      - ./error-pages:/usr/share/nginx/html  # Monta páginas personalizadas
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf  # Configuración Nginx
    networks:
      - traefik_network
    labels:
      traefik.enable: true
      # Configuración del router de errores
      traefik.http.routers.error-router.rule: HostRegexp(`{host:.+}`)  # Captura todos los hosts
      traefik.http.routers.error-router.priority: 1  # Alta prioridad
      traefik.http.routers.error-router.entrypoints: webinsecure
      traefik.http.routers.error-router.middlewares: error-pages-middleware
      # Configuración del middleware de errores
      traefik.http.middlewares.error-pages-middleware.errors.status: 500-599
      traefik.http.middlewares.error-pages-middleware.errors.service: error-pages-service
      traefik.http.middlewares.error-pages-middleware.errors.query: /{status}.html
      # Configuración del servicio
      traefik.http.services.error-pages-service.loadbalancer.server.port: 80

  # ======================
  # Servicio de Prueba Whoami
  # ======================
  my-test-app:
    image: containous/whoami  # Imagen oficial de prueba
    networks:
      - traefik_network
    labels:
      traefik.enable: true
      traefik.http.routers.my-test-app.rule: Host(`test.localhost`)
      traefik.http.routers.my-test-app.entrypoints: webinsecure
      traefik.http.services.my-test-app.loadbalancer.server.port: 80

  # ======================
  # Monitorización: Prometheus
  # ======================
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml  # Configuración personalizada
    ports:
      - "9090:9090"  # Puerto de Prometheus
    networks:
      - traefik_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`monitor.localhost`)"
      - "traefik.http.routers.prometheus.entrypoints=webinsecure"

  # ======================
  # Monitorización: Grafana
  # ======================
  grafana:
    image: grafana/grafana
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana  # Volumen persistente para datos
    ports:
      - "3000:3000"  # Puerto de Grafana
    networks:
      - traefik_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
      - "traefik.http.routers.grafana.entrypoints=webinsecure"

# ======================
# Volúmenes
# ======================
volumes:
  grafana_data:
    driver: local  # Almacenamiento local para Grafana

# ======================
# Redes
# ======================
networks:
  traefik_network:
    name: traefik_network  # Nombre fijo para la red
    driver: bridge  # Controlador de red
