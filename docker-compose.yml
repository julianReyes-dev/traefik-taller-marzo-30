services:
  traefik:
    image: traefik:v2.9
    container_name: traefik
    security_opt:
      - no-new-privileges:true
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/etc/traefik/traefik.yml 
    ports:
      - 80:80
      - 8080:8080
    command:
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=traefik_network
      - --entrypoints.webinsecure.address=:80

    networks:
      - traefik_network

    labels:
      traefik.enable: true
      # Dashboard
      traefik.http.routers.traefik.rule: Host(`traefik.localhost`)
      traefik.http.routers.traefik.service: api@internal
      traefik.http.routers.traefik.entrypoints: webinsecure

  # API Básico (3 instancias)
  api_basic:
    build: ./api_basic
    deploy:
      replicas: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-basic.entrypoints=webinsecure"
      - "traefik.http.routers.api-basic.rule=Host(`api.localhost`) && PathPrefix(`/basic`)"
      - "traefik.http.routers.api-basic.service=api-basic"
      - "traefik.http.services.api-basic.loadbalancer.server.port=3000"
      # Configuración de fallback
      - "traefik.http.services.api-basic.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.api-basic.loadbalancer.healthcheck.interval=5s"
      # Middleware para errores 500 -> redirige a api_backup
      - "traefik.http.middlewares.api-500.errors.status=500-599"
      - "traefik.http.middlewares.api-500.errors.service=api-backup"
      - "traefik.http.middlewares.api-500.errors.query=/backup"
      
      - "traefik.http.routers.api-basic.middlewares=api-500"
    networks:
      - traefik_network
  
  # API Premium (2 instancias)
  api_premium:
    build: ./api_premium
    deploy:
      replicas: 2
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-premium.rule=Host(`api.localhost`) && PathPrefix(`/premium`)"
      - "traefik.http.services.api-premium.loadbalancer.server.port=3001"
      - "traefik.http.routers.api-premium.middlewares=premium-auth"
      - "traefik.http.middlewares.premium-auth.basicauth.users=user:$$apr1$$Qi7HBAKK$$xS5cIzL8VQAFy6cimC7v4." # user:user
    networks:
      - traefik_network

  # API Admin (1 instancia)
  api_admin:
    build: ./api_admin
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-admin.rule=Host(`api.localhost`) && PathPrefix(`/admin`)"
      - "traefik.http.services.api-admin.loadbalancer.server.port=3002"
      - "traefik.http.routers.api-admin.middlewares=admin-chain"
      - "traefik.http.middlewares.admin-chain.chain.middlewares=admin-auth,admin-ipwhitelist"
      - "traefik.http.middlewares.admin-auth.basicauth.users=admin:$$apr1$$Z1sbqKz8$$4/g3NzDCqLE/tURphL2vb1" # admin:secret
      - "traefik.http.middlewares.admin-ipwhitelist.ipwhitelist.sourcerange=127.0.0.1/32,192.168.20.22,172.18.0.0/16"
    networks:
      - traefik_network
  
  # Servidor de respaldo (se activará bajo alta carga)
  api_backup:
    build: ./api_backup
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-backup.rule=Host(`api.localhost`) && PathPrefix(`/backup`)"
      - "traefik.http.services.api-backup.loadbalancer.server.port=3003"
    networks:
      - traefik_network
  
  # The error pages server
  nginxError:
    image: nginx:latest
    volumes:
      - ./error-pages:/usr/share/nginx/error-pages
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      # This is the network over which Traefik communicates with other containers.
      - traefik_network
    labels:
      traefik.enable: true

      traefik.http.routers.error-router.rule: HostRegexp(`{host:.+}`)
      traefik.http.routers.error-router.priority: 1
      traefik.http.routers.error-router.entrypoints: webinsecure
      traefik.http.routers.error-router.middlewares: error-pages-middleware

      traefik.http.middlewares.error-pages-middleware.errors.status: 500-599
      traefik.http.middlewares.error-pages-middleware.errors.service: error-pages-service
      traefik.http.middlewares.error-pages-middleware.errors.query: /{status}.html

      traefik.http.services.error-pages-service.loadbalancer.server.port: 80

  # A defined service
  my-test-app:
    image: containous/whoami
    networks:
      # This is the network over which Traefik communicates with other containers.
      - traefik_network
    labels:
      traefik.enable: true
      traefik.http.routers.my-test-app.rule: Host(`test.localhost`)
      traefik.http.routers.my-test-app.entrypoints: webinsecure
      traefik.http.services.my-test-app.loadbalancer.server.port: 80
      
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - traefik_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`monitor.localhost`)"
      - "traefik.http.routers.prometheus.entrypoints=webinsecure"

  grafana:
    image: grafana/grafana
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - traefik_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
      - "traefik.http.routers.grafana.entrypoints=webinsecure"

volumes:
  grafana_data:
    driver: local

networks:
  traefik_network:
    name: traefik_network
    driver: bridge
